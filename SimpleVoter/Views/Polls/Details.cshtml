@using CsQuery.Implementation
@using Microsoft.AspNet.Identity
@using Newtonsoft.Json
@model SimpleVoter.Core.Models.Poll

@{
    ViewBag.Title = "Details";
    var userName = Model.UserId == null ? "Anonymous" : Model.User.UserName;
    var answerInputType = Model.AllowMultipleAnswers ? "checkbox" : "radio";
    var multipleAnswers = Model.AllowMultipleAnswers ? "allowed" : "not allowed";
    var hasNoVotes = !Model.Answers.Select(a => a.Votes).Any(v => v > 0);
    var expirationDate = Model.ExpirationDate == null ? "does not expire" : Model.ExpirationDate.ToString();
    var hasExpired = Model.ExpirationDate != null && DateTime.Now >= Model.ExpirationDate.Value;
    var chartClasses = hasExpired
        ? hasNoVotes
            ? "col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2"
            : "col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 poll-details-container"
        : "col-sm-4 col-sm-push-4 poll-details-container";
    var updated = Model.UpdateDate > Model.CreationDate;
}

<header class="main-header text-center hidden-xs">
    <h1 class="main-title">Simple Voter</h1>
    <p class="main-description">Create custom polls with live results.</p>
    <div class="dashboard-buttons">
        @if (!string.IsNullOrWhiteSpace(Model.UserId) && Model.UserId == User.Identity.GetUserId())
        {
            <button class="btn btn-custom btn-white danger-hover" data-toggle="modal" data-target="#endPollModal">End Poll</button>
            @Html.ActionLink("Update Poll", "ShowUserPolls", "Polls", null, new {@class = "btn btn-custom btn-white danger-hover" })
            <button class="btn btn-custom btn-white error-hover" data-toggle="modal" data-target="#deleteModal">Delete Poll</button>
        }
        else
        {
            @Html.ActionLink("New Poll", "Create", "Polls", null, new { @class = "btn btn-custom btn-white danger-hover" })
            if (Request.IsAuthenticated)
            {
                @Html.ActionLink("Public Polls", "ShowAll", "Polls", null, new { @class = "btn btn-custom btn-white danger-hover" })
                @Html.ActionLink("My Polls", "ShowUserPolls", "Polls", null, new { @class = "btn btn-custom btn-white danger-hover" })
            }
            else
            {
                @Html.ActionLink("Browse Polls", "ShowAll", "Polls", null, new { @class = "btn btn-custom btn-white danger-hover" })
            }
        }
    </div>
</header>

<section class="mid-section">
    <div class="col-sm-12 col-md-10 col-md-offset-1">
        <h3 class="text-center">@Model.Question</h3>
        <hr />

        @if (!hasExpired)
        {
            <div class="col-sm-4 col-sm-push-4 poll-details-container text-center">
                <div class="option-container">
                    @foreach (var answer in Model.Answers)
                    {
                        <div class="form-group answer-group">
                            <input type="@answerInputType" name="@answerInputType" id="@answerInputType-@answer.Id" autocomplete="off" />
                            <div class="btn-group">
                                <label for="@answerInputType-@answer.Id" class="btn btn-default @answerInputType-answer-content">
                                    @answer.Content
                                </label>
                                <label for="@answerInputType-@answer.Id" class="btn btn-default @answerInputType-answer-votes" data-placement="bottom" data-toggle="tooltip" title="@answer.Votes votes">
                                    @answer.Votes
                                </label>
                                <label for="@answerInputType-@answer.Id" class="btn btn-default @answerInputType-answer-check">
                                    <span class="glyphicon glyphicon-ok" id="@answer.Id"></span>
                                    <span> </span>
                                </label>
                            </div>
                        </div>
                    }
                </div>
                <button class="btn btn-custom btn-white" id="voteButton">Vote!</button>
            </div>
        }
        else
        {
            <div class="col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2">
                @foreach (var answer in Model.Answers)
                {
                    <div class="expired-answer">
                        <span class="expired-answer-content">
                            @answer.Content
                        </span>
                        <span class="expired-answer-votes" data-placement="bottom" data-toggle="tooltip" title="@answer.Votes votes">
                            @answer.Votes
                        </span>
                    </div>
                }
            </div>
        }

        <div class="@chartClasses">
            @if (hasNoVotes)
            {
                if (!hasExpired)
                {
                    <div class="poll-info">
                        <h3 class="text-center">No one has voted yet. Don't hesitate, be the first one!</h3>
                    </div>
                }
            }
            else
            {
                <canvas id="votesChart"></canvas>
            }
        </div>

        @if (!hasExpired)
        {
            <div class="col-sm-pull-8 col-sm-4 text-center poll-details-container">
                <div class="poll-info">
                    <p>
                        Visibility:<br class="visible-xs" /> @Model.Visibility
                    </p>
                    <p> Author:<br class="visible-xs" /> @userName</p>
                    <p> Multiple answers:<br class="visible-xs" /> @multipleAnswers</p>
                    <p>
                        Only logged in users can vote:<br class="visible-xs" /> yes/no
                    </p>
                    <p>
                        Only logged in users can display:<br class="visible-xs" /> yes/no (if yes - 'only logged in users can vote will' be checked as well)
                    </p>
                    <p> Creation time:<br class="visible-xs" /> @Model.CreationDate</p>
                    @if (updated)
                    { <p class="last-update"> Last update:<br class="visible-xs" /> @Model.CreationDate</p> }
                    <p> Expiration time:<br class="visible-xs" /> @expirationDate</p>
                </div>
            </div>
        }
        else
        {
            <div class="text-center poll-details-container col-sm-8 col-sm-offset-2 col-xs-12">
                <div class="poll-info">
                    @if (hasNoVotes)
                    {
                        <h3 class="text-center">There were no votes for this poll.</h3>
                    }
                    <p>This poll has ended. You can @Html.ActionLink("create your own poll", "Create", "Polls") or @Html.ActionLink("browse other polls", "ShowAll", "Polls").</p>
                    <p>Poll by @userName</p>
                    <p class="expiration-date">Expired: @Model.ExpirationDate</p>
                </div>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrWhiteSpace(Model.UserId) && Model.UserId == User.Identity.GetUserId())
    {
        <div class="visible-xs text-center">
            @Html.ActionLink("End Poll", "ShowAll", "Polls", null, new { @class = "btn btn-custom btn-white danger-hover" })
            @Html.ActionLink("Update Poll", "ShowUserPolls", "Polls", null, new { @class = "btn btn-custom btn-white danger-hover" })
            <button class="btn btn-custom btn-white error-hover" data-toggle="modal" data-target="#deleteModal">Delete Poll</button>
        </div>
    }
    
    <div id="deleteModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Poll</h4>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this poll? Poll will be deleted permanently.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Delete</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>
    </div>
    
    <div id="endPollModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">End Poll</h4>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to end this poll? Poll will not disappear from your dashboard and still you will be able to see the results but people won't be able to vote anymore.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning" data-dismiss="modal">End</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>

        </div>
    </div>
</section>

@section scripts
{
    <script>
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            showChart();

            if (sessionStorage.voted == 'true') {
                sessionStorage.setItem('voted', 'false');
                toastr.success('Your vote has been added.', 'Voted!');
            }


            var options = @hasExpired.ToString().ToLower() ? $(".expired-answer") : $(".option-container").children();

            for (var i = 0; i < options.length; i++) {
                var colors = getColors(options.length);

                @if (hasExpired)
                {
                    @:$(options[i]).css("background-color", colors[i]);
                }
                else
                {
                    <text>
                        $(options[i])
                            .find(".checkbox-answer-content, .checkbox-answer-votes, .radio-answer-content, .radio-answer-votes")
                            .css("border-left", "20px " + colors[i] + " solid");

                        $(options[i])
                            .find(".checkbox-answer-content, .checkbox-answer-check, .radio-answer-content, .radio-answer-check")
                            .css("border-right", "20px " + colors[i] + " solid");

                        $(options[i])
                            .find(".checkbox-answer-votes, .checkbox-answer-check, .radio-answer-votes, .radio-answer-check")
                            .css("background-color", colors[i]);
                    </text>
                }
            }
        });

        $("#voteButton").on("click",
            function() {
                var checkedOptions = $(".btn-group").find("span.glyphicon.glyphicon-ok")
                    .filter(function(index) {
                        return $(this).css("display") === "inline-block";
                    });

                if (checkedOptions.length == 0) {
                    toastr.error('No option has been chosen.', 'Choose something!');
                    return;
                }

                var answerIds = [];
                checkedOptions.each(function() {
                    answerIds.push(this.id);
                });

                jQuery.ajaxSettings.traditional = true;
                $.ajax({
                    url: '/Polls/Vote',
                    type: 'POST',
                    data: { ids: answerIds, expirationDate: '@Model.ExpirationDate' },
                    success: function (data) {
                        if (data.success) {
                            sessionStorage.setItem('voted', 'true');
                            location.reload();
                        } else {
                            toastr.error(data.responseText, 'Error!');
                        }
                    }
                });
            });

        showChart = function() {
            if (@hasNoVotes.ToString().ToLower())
                return;

            var ctx = document.getElementById("votesChart").getContext('2d');

            var labels = [];
            var data = [];
            @foreach (var d in Model.Answers)
            {
                @:labels.push("@d.Content");
                @:data.push("@d.Votes");
            }

            var myChart = new Chart(ctx,
            {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Votes',
                            data: data,
                            backgroundColor: getColors(data.length),
                            borderColor: getColors(data.length),
                            borderWidth: 1
                        }
                    ],
                    options: {
                        animation: {
                            animateRotate: true
                        }
                    }
                }
            });
        };

        function getColors(numberOfElements) {
            var arrayOfColors = [
                'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)',
                '#e84c3d', '#9a59b5', '#95a5a5', '#a5c63b', '#e67f22', '#3a6f81', '#345f41',
                '#f47cc3', '#ffcd02', '#3697de', '#745dc5', '#79302a', '#f0dfb4', '#2dcc70',
                '#5f4534', '#a28671', '#34495e', '#1bbc9b', '#5e335e', '#b7c9f1', '#2b2b2b',
                '#ef727a', '#5165a2'
            ];

            while (numberOfElements > arrayOfColors.length)
                arrayOfColors = arrayOfColors.concat(arrayOfColors);

            var resultArray = arrayOfColors.slice(0, numberOfElements);
            return resultArray;
        }
    </script>
}
