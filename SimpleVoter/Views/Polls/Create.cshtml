@using SimpleVoter.Core.Enums
@model SimpleVoter.Core.ViewModels.PollViewModels.CreateViewModel

@{
    ViewBag.Title = "Create";
}

<header class="main-header text-center">
    <h1 class="main-title">New poll</h1>
    <p class="main-description">Creating new poll.</p>
</header>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <section class="mid-section">
        <div class="col-md-offset-3 col-md-6">
            <fieldset class="new-poll-fieldset">
                <div class="form-horizontal">
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.Question)
                            @Html.TextAreaFor(model => model.Question, new { htmlAttributes = new { @class = "form-control question-area" } })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.AllowMultipleAnswers)
                        <div class="checkbox">
                            @Html.CheckBoxFor(model => model.AllowMultipleAnswers, htmlAttributes: new { data_toggle = "toggle" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Answers)
                        <div class="answers">
                            <input type="text" name="Answers[0].Content" class="form-control answer" id="answer1" data-val="true" data-val-ensureminimumelements="Question must contains at least 2 answers!" data-val-ensureminimumelements-minelements="2" />
                        </div>
                    </div>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="form-group">
                            <label class="label-with-comment" for="WillExpire">Will Expire</label>
                            <span class="additional-comment">(Voting will be closed after specified time)</span>
                            <div class="checkbox">
                                <input name="WillExpire" id="WillExpire" type="checkbox" data-toggle="toggle">
                            </div>
                        </div>

                        <div class="form-group expiration-date-container">
                            @Html.LabelFor(model => model.ExpirationDate)
                            <input type='text' name="ExpirationDate" id="ExpirationDate" class="form-control" data-val="true" data-val-currentdate="Date time"/>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Visibility)
                            @Html.DropDownList("Visibility",
                            EnumHelper.GetSelectList(typeof(Visibility)),
                                new { @class = "form-control" })
                        </div>
                    }

                    <div class="form-group">
                        <input type="submit" value="Create" class="btn btn-custom btn-white" />
                        @(Request.IsAuthenticated
                        ? Html.ActionLink("Back to list", "ShowUserPolls", null, new { @class = "btn btn-custom btn-white" })
                        : Html.ActionLink("Back to homepage", "Index", "Home", null, new { @class = "btn btn-custom btn-white" }))
                    </div>
                </div>
            </fieldset>
        </div>
    </section>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('#ExpirationDate').datetimepicker({
                format: 'YYYY-MM-DD HH:mm'
            });
        });

        $('.answers').on('input',
            '.answer',
            function (e) {
                var numberOfAnswers = $(".answers input").length;
                if (!/\S/.test(this.value) && this.id == "answer" + (numberOfAnswers - 1))
                    while (!/\S/.test($("#answer" + (numberOfAnswers - 1)).val())) {
                        $("#answer" + numberOfAnswers).hide(250,
                            function () {
                                $(this).remove();
                            });
                        numberOfAnswers--;
                    }
                else if (this.id == "answer" + numberOfAnswers && /\S/.test(this.value)) {
                    var inputToAppend = $('<input type="text" class="form-control answer"  style="display: none;" id="answer' +
                        (numberOfAnswers + 1) +
                        '" name="Answers[' +
                        numberOfAnswers +
                        '].Content"/>');

                    $(inputToAppend).insertAfter($(this));
                    inputToAppend.show(500);
                }
            });

        $('#WillExpire').change(function () {
            toggleExpirationDateField();
        });

        function toggleExpirationDateField() {
            if ($('#WillExpire').is(":checked")) {
                $(".expiration-date-container").show(500);
                $("#ExpirationDate").val("@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd hh:mm")");
            } else {
                $(".expiration-date-container").hide(500);
                $("#ExpirationDate").val("");
            }
        }
    </script>
}